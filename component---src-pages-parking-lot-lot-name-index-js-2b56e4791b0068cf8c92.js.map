{"version":3,"file":"component---src-pages-parking-lot-lot-name-index-js-2b56e4791b0068cf8c92.js","mappings":"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","sources":["webpack://par-qr-app/./src/components/parker/view-lot.js","webpack://par-qr-app/./src/pages/parking/lot/[lotName]/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\nimport '../../css/main.css';\nimport '../../css/occupancy.css'; \n\nclass Table extends React.Component {\n    constructor(props) {\n      super(props);\n      this.columns = 3; \n      this.timeElapsed = moment(); \n      this.tick = this.tick.bind(this); \n\n      this.state = { remainingTime: moment.duration(this.props.expirys[0].diff(moment())) };\n      var rts = []\n      for (var i=0 ; i<this.props.numSpots; i++){\n        rts.push(moment.duration(this.props.expirys[i].diff(moment())))        \n      }\n      this.state.remainingTimes = rts ;\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        const rt = [];\n        for (var i=0 ; i<props.numSpots; i++){\n          rt.push( moment.duration(props.expirys[i].diff(moment())) ) \n        }\n        return { remainingTimes: rt };\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick() {\n      const rt = [];\n      for (var i=0 ; i<this.props.numSpots; i++){\n        if (this.state.remainingTimes[i] > 0 ) {\n          rt.push( moment.duration(this.props.expirys[i].diff(moment())) ) \n        }else{\n          rt.push( moment.duration( 0 ) ) \n        }\n      }\n      this.setState({\n          remainingTimes: rt\n      });\n    }\n\n    getHourString(i){\n      if (this.state.remainingTimes[i].get('hours') < 10){\n          return \"0\"+this.state.remainingTimes[i].get('hours');\n      }\n      return this.state.remainingTimes[i].get('hours');\n    }\n\n    getMinuteString(i){\n        if (this.state.remainingTimes[i].get('minutes') < 10){\n            return \"0\"+this.state.remainingTimes[i].get('minutes');\n        }\n        return this.state.remainingTimes[i].get('minutes');\n    }\n\n    getSecondString(i){\n        if (this.state.remainingTimes[i].get('seconds') < 10){\n            return \"0\"+this.state.remainingTimes[i].get('seconds');\n        }\n        return this.state.remainingTimes[i].get('seconds');\n    }\n  \n    getTimeRemainingString(i){\n      if (this.isExpired(i)){\n        return \"EXPIRED\"\n      } else{\n        return this.getHourString(i).concat(\" hr \", this.getMinuteString(i), \" min \", this.getSecondString(i), \" s\")\n      }\n    }\n\n    getExpiryString(i){\n        return this.props.expirys[i].format(\"hh:mm A\")\n    }\n\n    getDayDiffString(i){\n      const daysAhead = this.state.remainingTimes[i].get('days')\n      if (daysAhead<0){\n        return \"(\".concat(daysAhead,\")\")\n      } else{ \n        return \"\"\n      }\n    }\n\n    isExpired(i){\n      if (this.state.remainingTimes[i] < 0){\n        return true; \n      } else{\n        return false; \n      }\n    }\n  \n    render() {\n      let rows = [] \n      for (var i = 0; i < this.props.numSpots; i++){\n        let rowID = `row${i}`\n        let cell = []\n\n        for (var idx = 0; idx < this.columns; idx++){\n          let cellID = `cell${i}-${idx}`\n          if (idx === 0){\n            cell.push(<td key={cellID} id={cellID}> {this.props.names[i]} </td>);\n          }\n          if (idx === 1){\n              cell.push(<td key={cellID} id={cellID} > { this.getTimeRemainingString(i) } </td>)\n          }\n          if (idx === 2){\n            cell.push(<td key={cellID} id={cellID}> {this.getExpiryString(i)} {this.getDayDiffString(i)} </td>);\n          }\n        }\n        if (i%2 === 1){\n          if (this.isExpired(i)){\n            rows.push(<tr className=\"odd-exp\" key={i} id={rowID}>{cell}</tr>)\n          }else{\n            rows.push(<tr className=\"odd\" key={i} id={rowID}>{cell}</tr>)\n          }\n        }else{\n          if (this.isExpired(i)){\n            rows.push(<tr className=\"even-exp\" key={i} id={rowID}>{cell}</tr>)\n          }else{\n            rows.push(<tr className=\"even\" key={i} id={rowID}>{cell}</tr>)\n          }        }\n      }\n\n      return (\n        <section className=\"view-spots\">\n          <div className=\"title\">  \n            You are Viewing: \n            <span className=\"highlight\"> {this.props.lotName}</span>\n          </div>\n          <div className=\"container\">\n            <table className=\"table\" >\n              <thead >\n                <tr>\n                  <th className=\"head\"> Spot Name</th>\n                  <th className=\"head\">Time Remaining</th>\n                  <th className=\"head\">Expire Time</th>\n                </tr>\n              </thead>\n              <tbody className=\"body\">\n                {rows}\n              </tbody>\n            </table>\n          </div>\n          <p className=\"invisible_dot\"> . </p>\n        </section>\n  \n      )\n    }\n  }\n\nexport {Table};","import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\n\n// import \"../../../../css/main.css\"\nimport { Header } from '../../../../components/header.js';\nimport { Table } from '../../../../components/parker/view-lot';\n\nconst queryService = 'https://backend.demo.parqr.app:8443/graphql/';\n\nconst LotPage = (props) => {\n\n  const lotName = props.lotName;\n  const maxNumSpots = 50; //FIX: should bring in actual number of spots here \n\n  // query vals\n  const [names, setNames] = useState([]);\n  const [expirys, setExpirys] = useState(new Array(maxNumSpots).fill(moment()));\n\n  const lotQuery = `query lotQuery($lotName: ID!) {\n    lots(name: $lotName) {\n  \t\tname\n    \tspots {\n      \tname\n      \tendTime\n    }\n    }\n  }`;\n\n  // sets initial state on page load or after success\n  useEffect(() => {\n    return fetch(queryService, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify({\n        query: lotQuery,\n        variables: { lotName: lotName },\n      })\n    })\n      .then(r => r.json())\n      .then(data => {\n        console.log(data.data.lots[0].spots.name)\n        let spotNames = [];\n        let spotExpirys = [];\n        for (var i = 0; i < data.data.lots[0].spots.length; i++) {\n          spotNames.push(data.data.lots[0].spots[i].name);\n          spotExpirys.push(moment(data.data.lots[0].spots[i].endTime));\n        }\n        setNames(spotNames);\n        setExpirys(spotExpirys);\n      })\n  }, [])\n\n\n  return (\n    <React.Fragment>\n      <Header />\n      <Table\n        lotName={lotName}\n        names={names}\n        expirys={expirys}\n        numSpots={names.length}\n      />\n    </React.Fragment>\n  )\n};\n\nexport default LotPage\n"],"names":["Table","props","columns","timeElapsed","moment","tick","bind","state","remainingTime","expirys","diff","rts","i","numSpots","push","remainingTimes","getDerivedStateFromProps","rt","componentDidMount","this","timerID","setInterval","componentWillUnmount","clearInterval","setState","getHourString","get","getMinuteString","getSecondString","getTimeRemainingString","isExpired","concat","getExpiryString","format","getDayDiffString","daysAhead","render","rows","rowID","cell","idx","cellID","key","id","names","className","lotName","React","useState","setNames","Array","fill","setExpirys","useEffect","fetch","method","headers","body","JSON","stringify","query","variables","then","r","json","data","console","log","lots","spots","name","spotNames","spotExpirys","length","endTime"],"sourceRoot":""}