{"version":3,"file":"component---src-pages-parking-lot-lot-name-index-js-2cbda74f7718f40b7a2d.js","mappings":"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","sources":["webpack://par-qr-app/./src/components/parker/view-lot.js","webpack://par-qr-app/./src/pages/parking/lot/[lotName]/index.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport '../../css/main.css';\r\nimport '../../css/occupancy.css'; \r\n\r\nclass Table extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.columns = 3; \r\n      this.timeElapsed = moment(); \r\n      this.tick = this.tick.bind(this); \r\n\r\n      this.state = { remainingTime: moment.duration(this.props.expirys[0].diff(moment())) };\r\n      var rts = []\r\n      for (var i=0 ; i<this.props.numSpots; i++){\r\n        rts.push(moment.duration(this.props.expirys[i].diff(moment())))        \r\n      }\r\n      this.state.remainingTimes = rts ;\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const rt = [];\r\n        for (var i=0 ; i<props.numSpots; i++){\r\n          rt.push( moment.duration(props.expirys[i].diff(moment())) ) \r\n        }\r\n        return { remainingTimes: rt };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    tick() {\r\n      const rt = [];\r\n      for (var i=0 ; i<this.props.numSpots; i++){\r\n        if (this.state.remainingTimes[i] > 0 ) {\r\n          rt.push( moment.duration(this.props.expirys[i].diff(moment())) ) \r\n        }else{\r\n          rt.push( moment.duration( 0 ) ) \r\n        }\r\n      }\r\n      this.setState({\r\n          remainingTimes: rt\r\n      });\r\n    }\r\n\r\n    getHourString(i){\r\n      if (this.state.remainingTimes[i].get('hours') < 10){\r\n          return \"0\"+this.state.remainingTimes[i].get('hours');\r\n      }\r\n      return this.state.remainingTimes[i].get('hours');\r\n    }\r\n\r\n    getMinuteString(i){\r\n        if (this.state.remainingTimes[i].get('minutes') < 10){\r\n            return \"0\"+this.state.remainingTimes[i].get('minutes');\r\n        }\r\n        return this.state.remainingTimes[i].get('minutes');\r\n    }\r\n\r\n    getSecondString(i){\r\n        if (this.state.remainingTimes[i].get('seconds') < 10){\r\n            return \"0\"+this.state.remainingTimes[i].get('seconds');\r\n        }\r\n        return this.state.remainingTimes[i].get('seconds');\r\n    }\r\n  \r\n    getTimeRemainingString(i){\r\n      if (this.isExpired(i)){\r\n        return \"EXPIRED\"\r\n      } else{\r\n        return this.getHourString(i).concat(\" hr \", this.getMinuteString(i), \" min \", this.getSecondString(i), \" s\")\r\n      }\r\n    }\r\n\r\n    getExpiryString(i){\r\n        return this.props.expirys[i].format(\"hh:mm A\")\r\n    }\r\n\r\n    getDayDiffString(i){\r\n      const daysAhead = this.state.remainingTimes[i].get('days')\r\n      if (daysAhead<0){\r\n        return \"(\".concat(daysAhead,\")\")\r\n      } else{ \r\n        return \"\"\r\n      }\r\n    }\r\n\r\n    isExpired(i){\r\n      if (this.state.remainingTimes[i] < 0){\r\n        return true; \r\n      } else{\r\n        return false; \r\n      }\r\n    }\r\n  \r\n    render() {\r\n      let rows = [] \r\n      for (var i = 0; i < this.props.numSpots; i++){\r\n        let rowID = `row${i}`\r\n        let cell = []\r\n\r\n        for (var idx = 0; idx < this.columns; idx++){\r\n          let cellID = `cell${i}-${idx}`\r\n          if (idx === 0){\r\n            cell.push(<td key={cellID} id={cellID}> {this.props.names[i]} </td>);\r\n          }\r\n          if (idx === 1){\r\n              cell.push(<td key={cellID} id={cellID} > { this.getTimeRemainingString(i) } </td>)\r\n          }\r\n          if (idx === 2){\r\n            cell.push(<td key={cellID} id={cellID}> {this.getExpiryString(i)} {this.getDayDiffString(i)} </td>);\r\n          }\r\n        }\r\n        if (i%2 === 1){\r\n          if (this.isExpired(i)){\r\n            rows.push(<tr className=\"odd-exp\" key={i} id={rowID}>{cell}</tr>)\r\n          }else{\r\n            rows.push(<tr className=\"odd\" key={i} id={rowID}>{cell}</tr>)\r\n          }\r\n        }else{\r\n          if (this.isExpired(i)){\r\n            rows.push(<tr className=\"even-exp\" key={i} id={rowID}>{cell}</tr>)\r\n          }else{\r\n            rows.push(<tr className=\"even\" key={i} id={rowID}>{cell}</tr>)\r\n          }        }\r\n      }\r\n\r\n      return (\r\n        <section className=\"view-spots\">\r\n          <div className=\"title\">  \r\n            You are Viewing: \r\n            <span className=\"highlight\"> {this.props.lotName}</span>\r\n          </div>\r\n          <div className=\"container\">\r\n            <table className=\"table\" >\r\n              <thead >\r\n                <tr>\r\n                  <th className=\"head\"> Spot Name</th>\r\n                  <th className=\"head\">Time Remaining</th>\r\n                  <th className=\"head\">Expire Time</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"body\">\r\n                {rows}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </section>\r\n  \r\n      )\r\n    }\r\n  }\r\n\r\nexport {Table};","import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\n\r\n// import \"../../../../css/main.css\"\r\nimport { Header } from '../../../../components/header.js';\r\nimport { Table } from '../../../../components/parker/view-lot';\r\n\r\n\r\nconst LotPage = (props) => {\r\n\r\n  const lotName = props.lotName; \r\n  const maxNumSpots = 50; //FIX: should bring in actual number of spots here \r\n\r\n  // query vals\r\n  const [names, setNames] = useState([]);\r\n  const [expirys, setExpirys] = useState( new Array(maxNumSpots).fill(moment()) );  \r\n\r\n  const lotQuery = `query lotQuery($lotName: ID!) {\r\n    lots(name: $lotName) {\r\n  \t\tname\r\n    \tspots {\r\n      \tname\r\n      \tendTime\r\n    }\r\n    }\r\n  }`;\r\n\r\n  // sets initial state on page load or after success\r\n  useEffect(() => {\r\n    return fetch('http://localhost:8080/graphql/', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            query: lotQuery,\r\n            variables: { lotName: lotName },\r\n        })\r\n    })\r\n        .then(r => r.json())\r\n        .then(data => {\r\n          console.log(data.data.lots[0].spots.name)\r\n          let spotNames = [] ;\r\n          let spotExpirys = [] ;\r\n          for (var i=0; i<data.data.lots[0].spots.length; i++){\r\n            spotNames.push(data.data.lots[0].spots[i].name);\r\n            spotExpirys.push(moment(data.data.lots[0].spots[i].endTime));\r\n          }\r\n          setNames(spotNames);\r\n          setExpirys(spotExpirys);\r\n    })\r\n  },[])\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <Header />\r\n    <Table \r\n      lotName={lotName}\r\n      names={names}\r\n      expirys={expirys}\r\n      numSpots={names.length} \r\n    />\r\n    </React.Fragment>\r\n  )\r\n};\r\n\r\nexport default LotPage\r\n"],"names":["Table","props","columns","timeElapsed","moment","tick","bind","state","remainingTime","expirys","diff","rts","i","numSpots","push","remainingTimes","getDerivedStateFromProps","rt","componentDidMount","this","timerID","setInterval","componentWillUnmount","clearInterval","setState","getHourString","get","getMinuteString","getSecondString","getTimeRemainingString","isExpired","concat","getExpiryString","format","getDayDiffString","daysAhead","render","rows","rowID","cell","idx","cellID","key","id","names","className","lotName","React","useState","setNames","Array","fill","setExpirys","useEffect","fetch","method","headers","body","JSON","stringify","query","variables","then","r","json","data","console","log","lots","spots","name","spotNames","spotExpirys","length","endTime"],"sourceRoot":""}